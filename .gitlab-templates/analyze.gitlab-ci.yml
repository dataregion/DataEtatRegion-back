include:
  - component: $CI_SERVER_FQDN/csm/gitlab-components/docker-build@4.0.4
    inputs:
      image-name: ${REGISTRY}nocode/dev
      image-tag: latest-snapshot
      build-context: ./
      dockerfile-name: ./docker/Dockerfile.dev
      do-login: true
      registry: ${REGISTRY}
      registry-login: ${REGISTRY_USER}
      do-push: true
      enable-debug: true

#####################
# Taches "fourre tout"

"Print pipeline variables for debug":
  stage: ‚ò¢Ô∏è analyze
  rules:
    - when: never # XXX: √† r√©activer au besoin
  script:
    - |
      echo "Commit ref name         : $CI_COMMIT_REF_NAME"
      echo "Pipeline source         : $CI_PIPELINE_SOURCE"
      echo "Gitlab user login       : $GITLAB_USER_LOGIN"
      echo "DO_ANALYZE              : $DO_ANALYZE"
      echo "DO_TEST                 : $DO_TEST"
      echo "DO_BUILD                : $DO_BUILD"
      echo "DO_DOCKERIZE            : $DO_DOCKERIZE"
      echo "DO_INTEG_TESTS          : $DO_INTEG_TESTS"
      echo "DO_LOAD_TESTS:          : $DO_LOAD_TESTS"
      echo "DO_DEPLOY               : $DO_DEPLOY"
      echo "DO_DEPLOY_FOR_INTEG     : $_ENABLE_DEPLOY_FOR_INTEG"
      echo "DO_DEPLOY_FOR_PP_AND_P  : $_ENABLE_DEPLOY_FOR_PP_AND_P"

# Construit une image avec les venv de devs install√©s
"üê≥ dockerizing nocode/dev image":
  stage: ‚ò¢Ô∏è analyze
  extends: ".dockerize-${REGISTRY}nocode/dev"
  when: always

run-loadtests:
  stage: ‚ò¢Ô∏è analyze
  image: "${REGISTRY}nocode/dev:latest-snapshot"
  before_script:
    - |
      export KEYCLOAK_URL="${E2E_LT_KEYCLOAK_URL}"
      export KEYCLOAK_REALM="${E2E_LT_KEYCLOAK_REALM}"
      export CLIENT_ID="${E2E_LT_CLIENT_ID}"
      export USERNAME="${E2E_LT_USERNAME}"
      export PASSWORD="${E2E_LT_PASSWORD}"
      export API_BASE_URL="${E2E_LT_API_BASE_URL}"
  script:
    - env
    - | 
      cd tests_e2e/ && \
      source /build/tests_e2e/.venv/bin/activate && \
      perf-tests --run-time 60 --users 10 --spawn-rate 5
  rules:
    - if: '$DO_LOAD_TESTS == "‚úÖ"'
    - if: '$DO_LOAD_TESTS == "‚öôÔ∏è"'
      when: manual
    - when: never
  needs:
    - "üê≥ dockerizing nocode/dev image"

#####################
# Taches d'analyse

.default-analyze: &default-analyze
  stage: ‚ò¢Ô∏è analyze
  image: "${REGISTRY}nocode/dev:latest-snapshot"
  rules:
    - if: '$DO_ANALYZE == "‚úÖ"'
    - if: '$DO_ANALYZE == "‚öôÔ∏è"'
      when: manual
    - when: never

"Analyse d'architecture":
  <<: *default-analyze
  script: |
    cd app/ && \
      source /build/app/.venv/bin/activate && \
      lint-imports --config .importlinter.toml --no-cache --show-timings && \
      cd ..

    cd apis/ && \
      source /build/apis/.venv/bin/activate && \
      lint-imports --config .importlinter.toml --no-cache --show-timings && \
      cd ..

"Analyse syntaxique":
  <<: *default-analyze
  before_script:
    - uv pip install ruff --system
  script:
    - ruff format --check app/
    - ruff format --check grist-plugins/
    - ruff format --check services/
    - ruff format --check models/
    - ruff format --check gristcli/
    - ruff format --check tests_e2e/

"Analyse ruff":
  <<: *default-analyze
  before_script:
    - uv pip install ruff --system
  script:
    - ruff check app/
    - ruff check grist-plugins/
    - ruff check services/
    - ruff check models/
    - ruff check gristcli/
    - ruff check tests_e2e/
