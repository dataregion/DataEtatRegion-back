"Print pipeline variables for debug":
  stage: ☢️ analyze
  rules:
    - when: never # XXX: à réactiver au besoin
  script:
    - |
      echo "Commit ref name         : $CI_COMMIT_REF_NAME"
      echo "Pipeline source         : $CI_PIPELINE_SOURCE"
      echo "Gitlab user login       : $GITLAB_USER_LOGIN"
      echo "DO_ANALYZE              : $DO_ANALYZE"
      echo "DO_TEST                 : $DO_TEST"
      echo "DO_BUILD                : $DO_BUILD"
      echo "DO_DOCKERIZE            : $DO_DOCKERIZE"
      echo "DO_INTEG_TESTS          : $DO_INTEG_TESTS"
      echo "DO_DEPLOY               : $DO_DEPLOY"
      echo "DO_DEPLOY_FOR_INTEG     : $_ENABLE_DEPLOY_FOR_INTEG"
      echo "DO_DEPLOY_FOR_PP_AND_P  : $_ENABLE_DEPLOY_FOR_PP_AND_P"

"Analyse d'architecture pour app":
  stage: ☢️ analyze
  image: ${PYTHON_IMAGE}
  before_script:
    - python --version
    - cd app/
    - env
    - pip install .[dev] -r requirements.external.txt && pip install -r requirements.editable.txt --no-deps
  script:
    - lint-imports --config .importlinter.toml --no-cache --show-timings

"Analyse syntaxique":
  stage: ☢️ analyze
  image: pyfound/black:25.1.0@sha256:d849dfe2daaaf4582a7ad5178622700c28cd37f5fac0b3365accdde2013f1e66
  script:
    - black --check app/
    - black --check grist-plugins/
    - black --check services/
    - black --check models/
    - black --check gristcli/
    - black --check tests_e2e/

"Analyse ruff":
  stage: ☢️ analyze
  image: ${PYTHON_IMAGE}
  before_script:
    - pip install ruff
  script:
    - ruff check app/
    - ruff check grist-plugins/
    - ruff check services/
    - ruff check models/
    - ruff check gristcli/
    - ruff check tests_e2e/