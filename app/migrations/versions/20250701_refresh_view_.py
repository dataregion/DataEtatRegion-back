"""empty message

Revision ID: 20250620_refresh_view
Revises: 20250604_enrich_themes
Create Date: 2025-06-20 16:57:08.249796

"""
from alembic import op
import logging
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '20250701_refresh_view'
down_revision = '20250626_index_cp_ae'
branch_labels = None
depends_on = None





def upgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE INDEX IF NOT EXISTS idx_financial_ae_updated_at  ON public.financial_ae(updated_at);")
    op.execute("CREATE INDEX IF NOT EXISTS idx_financial_cp_updated_at  ON public.financial_cp(updated_at);")
    op.execute("CREATE INDEX IF NOT EXISTS idx_ademe_updated_at   ON public.ademe(updated_at);")
    op.execute("CREATE INDEX IF NOT EXISTS idx_ref_siret_updated_at  ON public.ref_siret(updated_at);")

    # ### end Alembic commands ###


def downgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP INDEX IF EXISTS idx_financial_ae_updated_at;")
    op.execute("DROP INDEX IF EXISTS idx_financial_cp_updated_at;")
    op.execute("DROP INDEX IF EXISTS idx_ademe_updated_at;")
    op.execute("DROP INDEX IF EXISTS idx_ref_siret_updated_at;")
    # ### end Alembic commands ###


def upgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('audit_refresh_materialized_views', schema='audit') as batch_op:
        batch_op.add_column(sa.Column('table', sa.String(), nullable=True))

    op.execute("CREATE INDEX IF NOT EXISTS idx_audit_refresh_materialized_views_date_table  ON audit.audit_refresh_materialized_views(date, \"table\");")
    # ### end Alembic commands ###


def downgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP INDEX IF EXISTS idx_audit_refresh_materialized_views_date_table;")

    with op.batch_alter_table('audit_refresh_materialized_views', schema='audit') as batch_op:
        batch_op.drop_column(('table'))
    # ### end Alembic commands ###


def upgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_demarches_simplifiees():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_demarches_simplifiees():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


# ###############################################################################
# Boilerplate
#
def _call(name):
    if name not in globals():
        logging.warning(f"Pas de fonction: '{name}'. la migration sera ignor√©e")
    else:
        globals()[name]()

def upgrade(engine_name):
    fn_name = f"upgrade_{engine_name}"
    _call(fn_name)

def downgrade(engine_name):
    fn_name = f"downgrade_{engine_name}"
    _call(fn_name)

# ###############################################################################