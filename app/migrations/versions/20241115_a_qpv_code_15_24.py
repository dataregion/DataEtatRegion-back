"""20241007_qpv_code_15_24

Revision ID: 20241007_qpv_code_15_24
Revises: 20241016_v1_prefapphost
Create Date: 2024-10-08 16:43:16.290622

"""
import shutil

import wget
from alembic import op
import sqlalchemy as sa
import logging
from pathlib import Path
import pandas as pd
from sqlalchemy import text
import chardet

# revision identifiers, used by Alembic.
revision = '20241115_a_qpv_code_15_24'
down_revision = '20241029_hf1_import_appid'
branch_labels = None
depends_on = None


def _import_to_db(work_path, file_name):
    with open(work_path / file_name, 'rb') as f:
        result = chardet.detect(f.read())
    df = pd.read_csv(work_path / file_name, sep=";", encoding=result['encoding'])

    logging.warning(df.columns)
    df = df[['Code quartier ', 'Quartier prioritaire ', 'noms communes']]
    df.rename(columns={
        'Code quartier ': 'code',
        'Quartier prioritaire ': 'label',
        'noms communes': 'label_commune'
    }, inplace=True)
    logging.warning("---")
    logging.warning(df.columns)
    for index, row in df.iterrows():
        upsert_query = f"""
                    INSERT INTO ref_qpv (code, label, label_commune)
                    VALUES ('{row['code']}', '{row['label'].replace("'", "''")}', '{row['label_commune'].replace("'", "''")}')
                    ON CONFLICT (code) DO UPDATE 
                    SET label = EXCLUDED.label, 
                        label_commune = EXCLUDED.label_commune
                """

        # Execute the upsert query
        op.execute(text(upsert_query))


def _download_source(work_path, file_name):

    url = "https://www.data.gouv.fr/fr/datasets/r/4c6bb7f3-97b6-4834-8a3a-f5f8b3e6735b"

    work_path.mkdir(exist_ok=True)

    file_path = work_path / file_name

    logging.warning("Download CSV %s to %s", url, file_path)
    wget.download(url, out=str(file_path))


def _import_new_qpv24():
    logging.warning('*** [START] FETCH QPV 2024 info ***')

    current_base_path = Path.cwd()
    workdir_path = current_base_path / 'workdir'
    file_name = 'liste-qp2024-hexagone-cog2023.csv'

    _download_source(workdir_path, file_name)

    _import_to_db(workdir_path, file_name)

    shutil.rmtree(workdir_path)
    logging.warning('*** [END] FETCH QPV 2024 info ***')


def upgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('ref_qpv', schema=None) as batch_op:
        batch_op.add_column(sa.Column('annee_decoupage', sa.Integer(), autoincrement=False, nullable=True))

    with op.batch_alter_table('ref_siret', schema=None) as batch_op:
        batch_op.alter_column('code_qpv', new_column_name='code_qpv15')
        batch_op.add_column(sa.Column('code_qpv24', sa.String(), nullable=True))
        batch_op.drop_constraint('ref_siret_code_qpv_fkey', type_='foreignkey')
        batch_op.create_foreign_key('ref_siret_code_qpv15_fkey', 'ref_qpv', ['code_qpv15'], ['code'])
        batch_op.create_foreign_key('ref_siret_code_qpv24_fkey', 'ref_qpv', ['code_qpv24'], ['code'])


    # Load new QPV
    _import_new_qpv24()

    # Update anne_decoupage by QP% = 2015; QN% = 2024
    op.execute(
        text("UPDATE ref_qpv SET annee_decoupage = 2015 WHERE code LIKE 'QP%'")
    )

    op.execute(
        text("UPDATE ref_qpv SET annee_decoupage = 2024 WHERE code LIKE 'QN%'")
    )
    # ### end Alembic commands ###


def downgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('ref_siret', schema=None) as batch_op:
        batch_op.alter_column('code_qpv15', new_column_name='code_qpv')
        batch_op.drop_constraint('ref_siret_code_qpv15_fkey', type_='foreignkey')
        batch_op.drop_constraint('ref_siret_code_qpv24_fkey', type_='foreignkey')
        batch_op.create_foreign_key('ref_siret_code_qpv_fkey', 'ref_qpv', ['code_qpv'], ['code'])
        batch_op.drop_column('code_qpv24')

    with op.batch_alter_table('ref_qpv', schema=None) as batch_op:
        batch_op.drop_column('annee_decoupage')
    # ### end Alembic commands ###


def upgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_demarches_simplifiees():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_demarches_simplifiees():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


# ###############################################################################
# Boilerplate
#
def _call(name):
    if name not in globals():
        logging.warning(f"Pas de fonction: '{name}'. la migration sera ignor√©e")
    else:
        globals()[name]()

def upgrade(engine_name):
    fn_name = f"upgrade_{engine_name}"
    _call(fn_name)

def downgrade(engine_name):
    fn_name = f"downgrade_{engine_name}"
    _call(fn_name)

# ###############################################################################