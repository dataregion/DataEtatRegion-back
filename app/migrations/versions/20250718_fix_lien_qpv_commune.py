"""fix lien qpv commune

Revision ID: 20250718_fix_join_qpv_commune
Revises: 20250701_refresh_view
Create Date: 2025-07-18 15:27:11.195971

"""

from pathlib import Path
import shutil
from alembic import op
import chardet
import pandas as pd
import sqlalchemy as sa
import logging
import wget

# revision identifiers, used by Alembic.
revision = "20250718_fix_join_qpv_commune"
down_revision = "20250701_refresh_view"
branch_labels = None
depends_on = None


# Nettoyer les colonnes multivaluées (insee_com et lib_com)
def _split_multivalues(value):
    if pd.isna(value):
        return []
    return [v.strip() for v in str(value).split(";")]


def _update_to_db(work_path, file_name):
    with open(work_path / file_name, "rb") as f:
        result = chardet.detect(f.read())
    df = pd.read_csv(work_path / file_name, sep=";", encoding=result["encoding"], dtype=str)

    logging.info("Récupération des colonnes")
    df["insee_com_list"] = df["insee_com"].apply(_split_multivalues)
    df["lib_com_list"] = df["lib_com"].apply(_split_multivalues)

    for _, row in df.iterrows():
        upset_qpv = f"""
                    INSERT INTO ref_qpv (code, label, label_commune,created_at, updated_at, annee_decoupage)
                    VALUES
                        (
                        '{row['code_qp']}', 
                        '{row['lib_qp'].replace("'", "''")}',
                        '{row['lib_com'].replace("'", "''")}',
                         CURRENT_TIMESTAMP,
                         CURRENT_TIMESTAMP,
                         2024
                        )
                    ON CONFLICT (code) DO UPDATE
                    SET 
                        label = EXCLUDED.label,
                        label_commune = EXCLUDED.label_commune,
                        updated_at = CURRENT_TIMESTAMP
                """
        op.execute(sa.text(upset_qpv))
        for i, code_insee in enumerate(row["insee_com_list"]):
            code_insee = code_insee.zfill(5)  # ajoute un 0 pour les colonnes de moins de 5 caractères

            # check commune present:
            check_commune = sa.text("SELECT id FROM ref_commune WHERE code = :code")
            result = op.get_bind().execute(check_commune, {"code": code_insee}).fetchone()
            # Si absente, insère-la (tu peux adapter label, région, etc. plus tard)
            if result is None:
                lib_epci = row["lib_epci"]
                lib_epci_sql = f"'{lib_epci.replace("'", "''")}'" if pd.notna(lib_epci) else "NULL"
                insert_commune = sa.text(
                    f"""
                    INSERT INTO ref_commune (code,label_commune,code_region,label_region,code_epci,label_epci,code_departement, label_departement, created_at) 
                    VALUES 
                    (
                    '{code_insee}',
                    '{row['lib_com_list'][i].replace("'", "''")}',
                    '{row['insee_reg']}',
                    '{row['lib_reg'].replace("'", "''")}',
                    '{row['siren_epci']}',
                    '{lib_epci_sql}',
                    '{row['insee_dep']}',
                    '{row['lib_dep'].replace("'", "''")}',
                    CURRENT_TIMESTAMP
                    )
                    """
                )
                op.execute(insert_commune)

            join_commune = f"""
                INSERT INTO ref_join_qpv_commune (qpv_id, commune_id) 
                SELECT
                    (SELECT id FROM ref_qpv WHERE code = '{row['code_qp']}' ), 
                    (SELECT id FROM ref_commune WHERE code = '{code_insee}');
                """
            op.execute(sa.text(join_commune))


def _download_source(work_path, file_name):

    url = "https://www.data.gouv.fr/fr/datasets/r/4c6bb7f3-97b6-4834-8a3a-f5f8b3e6735b"

    work_path.mkdir(exist_ok=True)

    file_path = work_path / file_name

    logging.info("Download CSV %s to %s", url, file_path)
    wget.download(url, out=str(file_path))


def _import_qpv_2024():
    logging.info("*** [START] FETCH QPV 2024 info ***")

    current_base_path = Path.cwd()
    workdir_path = current_base_path / "workdir"
    file_name = "liste-qp2024-hexagone-cog2023.csv"

    _download_source(workdir_path, file_name)

    _update_to_db(workdir_path, file_name)

    shutil.rmtree(workdir_path)
    logging.warning("*** [END] FETCH QPV 2024 info ***")


def upgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    logging.info("Delete QPV commune 2024")
    op.execute(
        sa.text(
            "DELETE FROM ref_join_qpv_commune where qpv_id IN (SELECT id from ref_qpv WHERE annee_decoupage = 2024 )"
        )
    )
    _import_qpv_2024()
    # ### end Alembic commands ###


def downgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass

    # ### end Alembic commands ###


def upgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_demarches_simplifiees():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_demarches_simplifiees():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


# ###############################################################################
# Boilerplate
#
def _call(name):
    if name not in globals():
        logging.warning(f"Pas de fonction: '{name}'. la migration sera ignorée")
    else:
        globals()[name]()


def upgrade(engine_name):
    fn_name = f"upgrade_{engine_name}"
    _call(fn_name)


def downgrade(engine_name):
    fn_name = f"downgrade_{engine_name}"
    _call(fn_name)


# ###############################################################################
