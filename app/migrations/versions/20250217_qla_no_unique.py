"""empty message

Revision ID: 20250217_qla_no_unique
Revises: 20250211_qpv_lieu_action
Create Date: 2025-02-17 14:58:06.654452

"""
from alembic import op
import logging

# revision identifiers, used by Alembic.
revision = '20250217_qla_no_unique'
down_revision = '20250211_qpv_lieu_action'
branch_labels = None
depends_on = None





def upgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('qpv_lieu_action', schema=None) as batch_op:
        batch_op.drop_constraint('uq_qpv_ej', type_='unique')
    # ### end Alembic commands ###


def downgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('qpv_lieu_action', schema=None) as batch_op:
        batch_op.create_unique_constraint('uq_qpv_ej', ['code_qpv', 'n_ej'])
    # ### end Alembic commands ###


def upgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_demarches_simplifiees():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_demarches_simplifiees():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


# ###############################################################################
# Boilerplate
#
def _call(name):
    if name not in globals():
        logging.warning(f"Pas de fonction: '{name}'. la migration sera ignor√©e")
    else:
        globals()[name]()

def upgrade(engine_name):
    fn_name = f"upgrade_{engine_name}"
    _call(fn_name)

def downgrade(engine_name):
    fn_name = f"downgrade_{engine_name}"
    _call(fn_name)

# ###############################################################################