"""20241029_hf1_import_appid

Revision ID: 20241029_hf1_import_appid
Revises: 20241018_z_v1_apponevtimport
Create Date: 2024-10-29 11:10:32.873321

"""
from alembic import op
import sqlalchemy as sa
import logging


# revision identifiers, used by Alembic.
revision = '20241029_hf1_import_appid'
down_revision = '20241018_z_v1_apponevtimport'
branch_labels = None
depends_on = None





def upgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('audit_insert_financial_tasks', schema=None) as batch_op:
        batch_op.add_column(sa.Column('application_clientid', sa.String(), nullable=True))

    # ### end Alembic commands ###


def downgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('audit_insert_financial_tasks', schema=None) as batch_op:
        batch_op.drop_column('application_clientid')

    # ### end Alembic commands ###


def upgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


# ###############################################################################
# Boilerplate
#
def _call(name):
    if name not in globals():
        logging.warning(f"Pas de fonction: '{name}'. la migration sera ignor√©e")
    else:
        globals()[name]()

def upgrade(engine_name):
    fn_name = f"upgrade_{engine_name}"
    _call(fn_name)

def downgrade(engine_name):
    fn_name = f"downgrade_{engine_name}"
    _call(fn_name)

# ###############################################################################