"""Ajout colonne issue de AIFE

Revision ID: 20250205_add_column_financial
Revises: 20250129_source_region_audit
Create Date: 2025-02-05 18:02:28.906884

"""
from alembic import op
import sqlalchemy as sa
import logging

# revision identifiers, used by Alembic.
revision = '20250205_add_column_financial'
down_revision = '20250129_source_region_audit'
branch_labels = None
depends_on = None


def upgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('financial_ae', schema=None) as batch_op:
        batch_op.add_column(sa.Column('tranche_fonctionnelle', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('fonds', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('projet_analytique', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('axe_ministeriel_1', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('axe_ministeriel_2', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('societe', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('centre_financier', sa.String(), nullable=True))

    with op.batch_alter_table('financial_cp', schema=None) as batch_op:
        batch_op.add_column(sa.Column('societe', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('exercice_comptable', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('n_poste_dp', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('tranche_fonctionnelle', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('fonds', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('projet_analytique', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('type_piece', sa.String(), nullable=True))

    # ### end Alembic commands ###


def downgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('financial_cp', schema=None) as batch_op:
        batch_op.drop_column('type_piece')
        batch_op.drop_column('projet_analytique')
        batch_op.drop_column('fonds')
        batch_op.drop_column('tranche_fonctionnelle')
        batch_op.drop_column('n_poste_dp')
        batch_op.drop_column('exercice_comptable')
        batch_op.drop_column('societe')

    with op.batch_alter_table('financial_ae', schema=None) as batch_op:
        batch_op.drop_column('centre_financier')
        batch_op.drop_column('societe')
        batch_op.drop_column('axe_ministeriel_2')
        batch_op.drop_column('axe_ministeriel_1')
        batch_op.drop_column('projet_analytique')
        batch_op.drop_column('fonds')
        batch_op.drop_column('tranche_fonctionnelle')
    # ### end Alembic commands ###


def upgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass

    # ### end Alembic commands ###


def downgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass

    # ### end Alembic commands ###


# ###############################################################################
# Boilerplate
#
def _call(name):
    if name not in globals():
        logging.warning(f"Pas de fonction: '{name}'. la migration sera ignor√©e")
    else:
        globals()[name]()

def upgrade(engine_name):
    fn_name = f"upgrade_{engine_name}"
    _call(fn_name)

def downgrade(engine_name):
    fn_name = f"downgrade_{engine_name}"
    _call(fn_name)

# ###############################################################################