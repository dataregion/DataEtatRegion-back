"""empty message

Revision ID: 20250604_enrich_themes
Revises: 20250527_themes_grist_columns
Create Date: 2025-06-04 18:15:57.730745

"""
from alembic import op
import sqlalchemy as sa
import logging

# revision identifiers, used by Alembic.
revision = '20250604_enrich_themes'
down_revision = '20250527_themes_grist_columns'
branch_labels = None
depends_on = None





def upgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('synchro_grist',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('grist_doc_id', sa.String(), nullable=True),
        sa.Column('grist_table_id', sa.String(), nullable=True),
        sa.Column('grist_table_name', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('grist_table_name')
    )
    with op.batch_alter_table('ref_theme', schema=None) as batch_op:
        batch_op.add_column(sa.Column('synchro_grist_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key('synchro_grist_id_fkey', 'synchro_grist', ['synchro_grist_id'], ['id'])
    # ### end Alembic commands ###


def downgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('ref_theme', schema=None) as batch_op:
        batch_op.drop_constraint('synchro_grist_id_fkey', type_='foreignkey')
        batch_op.drop_column('synchro_grist_id')
    op.drop_table('synchro_grist')
    # ### end Alembic commands ###


def upgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_demarches_simplifiees():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_demarches_simplifiees():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


# ###############################################################################
# Boilerplate
#
def _call(name):
    if name not in globals():
        logging.warning(f"Pas de fonction: '{name}'. la migration sera ignor√©e")
    else:
        globals()[name]()

def upgrade(engine_name):
    fn_name = f"upgrade_{engine_name}"
    _call(fn_name)

def downgrade(engine_name):
    fn_name = f"downgrade_{engine_name}"
    _call(fn_name)

# ###############################################################################