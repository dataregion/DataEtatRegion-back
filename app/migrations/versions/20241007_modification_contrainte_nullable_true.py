"""modification contrainte nullable true

Revision ID: 20241007_update_nullable_true
Revises: 20241007_ajout_data_source
Create Date: 2024-10-02 15:53:26.084075

"""

from alembic import op
import sqlalchemy as sa
import logging
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "20241007_update_nullable_true"
down_revision = "20241007_ajout_data_source"
branch_labels = None
depends_on = None


def upgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("financial_ae", schema=None) as batch_op:
        batch_op.alter_column("fournisseur_titulaire", existing_type=sa.VARCHAR(), nullable=True)
        batch_op.alter_column("date_modification_ej", existing_type=postgresql.TIMESTAMP(), nullable=True)

    with op.batch_alter_table("financial_cp", schema=None) as batch_op:
        batch_op.alter_column("groupe_marchandise", existing_type=sa.VARCHAR(), nullable=True)

    # ### end Alembic commands ###


def downgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("financial_cp", schema=None) as batch_op:
        batch_op.alter_column("groupe_marchandise", existing_type=sa.VARCHAR(), nullable=False)

    with op.batch_alter_table("financial_ae", schema=None) as batch_op:
        batch_op.alter_column("date_modification_ej", existing_type=postgresql.TIMESTAMP(), nullable=False)
        batch_op.alter_column("fournisseur_titulaire", existing_type=sa.VARCHAR(), nullable=False)

    # ### end Alembic commands ###


def upgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


# ###############################################################################
# Boilerplate
#
def _call(name):
    if name not in globals():
        logging.warning(f"Pas de fonction: '{name}'. la migration sera ignor√©e")
    else:
        globals()[name]()


def upgrade(engine_name):
    fn_name = f"upgrade_{engine_name}"
    _call(fn_name)


def downgrade(engine_name):
    fn_name = f"downgrade_{engine_name}"
    _call(fn_name)


# ###############################################################################
