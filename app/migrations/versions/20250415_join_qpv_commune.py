"""empty message

Revision ID: 20250415_join_qpv_commune
Revises: 20250403_hf_231_ademe_nullable
Create Date: 2025-04-15 10:05:18.930358

"""
import re
from alembic import op
import sqlalchemy as sa
import logging

# revision identifiers, used by Alembic.
revision = '20250415_join_qpv_commune'
down_revision = '20250403_hf_231_ademe_nullable'
branch_labels = None
depends_on = None



def _fetch_commune_by_label(conn: sa.Connection, label: str): 
    res = conn.execute(
        sa.text("SELECT id FROM public.ref_commune WHERE label_commune = :label;"),
        { "label": label }
    )
    return res.fetchone()

def _insert_join_qpv_commune(conn: sa.Connection, qpv: str, commune: str): 
    conn.execute(
        sa.text("INSERT INTO public.ref_join_qpv_commune(qpv_id, commune_id) VALUES(:qpv, :commune);"),
        { "qpv": qpv, "commune": commune }
    )

def upgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ref_join_qpv_commune',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('qpv_id', sa.Integer(), nullable=False),
        sa.Column('commune_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['commune_id'], ['ref_commune.id'], ),
        sa.ForeignKeyConstraint(['qpv_id'], ['ref_qpv.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    
    conn = op.get_bind()
    res = conn.execute(sa.text("SELECT id, label_commune FROM public.ref_qpv;"))
    rows = res.fetchall()
    unknown = []
    for row_qpv in rows:
        communes = str(row_qpv.label_commune).split(",")
        for c in communes:
            row_commune = _fetch_commune_by_label(conn, c.strip())
            if row_commune is not None:
                _insert_join_qpv_commune(conn, str(row_qpv.id), str(row_commune.id))
                continue

            # Gestion des arrondissements (Paris 16e, Lyon 9e, etc)
            match = re.search(r' \d{1,2}e$', c)
            if match:
                row_commune = _fetch_commune_by_label(conn, c.strip().replace(match.group(0), '', 1))
                if row_commune is not None:
                    _insert_join_qpv_commune(conn, str(row_qpv.id), str(row_commune.id))
                else:
                    unknown.append(c.strip().replace(match.group(0), '', 1))
    print("Unknown : " + str(len(unknown)))
    print(unknown)
    # ### end Alembic commands ###


def downgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('ref_join_qpv_commune')
    # ### end Alembic commands ###


def upgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_demarches_simplifiees():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_demarches_simplifiees():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


# ###############################################################################
# Boilerplate
#
def _call(name):
    if name not in globals():
        logging.warning(f"Pas de fonction: '{name}'. la migration sera ignor√©e")
    else:
        globals()[name]()

def upgrade(engine_name):
    fn_name = f"upgrade_{engine_name}"
    _call(fn_name)

def downgrade(engine_name):
    fn_name = f"downgrade_{engine_name}"
    _call(fn_name)

# ###############################################################################