"""empty message

Revision ID: 20250314_index_performance_vue
Revises: 20250310_vue_data_qpv
Create Date: 2025-03-14 10:15:26.969137

"""
from alembic import op
import logging

# revision identifiers, used by Alembic.
revision = '20250314_index_performance_vue'
down_revision = '20250310_vue_data_qpv'
branch_labels = None
depends_on = None


def upgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE INDEX IF NOT EXISTS idx_ffl_source_programme_annee ON public.flatten_financial_lines (source_region, annee,programme_code);")
    op.execute("CREATE INDEX IF NOT EXISTS idx_ffl_source_annee ON public.flatten_financial_lines (source_region, annee);")
    op.execute("CREATE INDEX IF NOT EXISTS idx_ffl_source_programme ON flatten_financial_lines (source_region, programme_code);")
    # ### end Alembic commands ###


def downgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP INDEX IF EXISTS idx_ffl_source_programme_annee")
    op.execute("DROP INDEX IF EXISTS idx_ffl_source_annee")
    op.execute("DROP INDEX IF EXISTS idx_ffl_source_programme")
    # ### end Alembic commands ###


def upgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


# ###############################################################################
# Boilerplate
#
def _call(name):
    if name not in globals():
        logging.warning(f"Pas de fonction: '{name}'. la migration sera ignor√©e")
    else:
        globals()[name]()

def upgrade(engine_name):
    fn_name = f"upgrade_{engine_name}"
    _call(fn_name)

def downgrade(engine_name):
    fn_name = f"downgrade_{engine_name}"
    _call(fn_name)

# ###############################################################################