"""20241115_wip_migration

Revision ID: 20241115_wip_migration
Revises: 20241029_hf1_import_appid
Create Date: 2024-10-29 15:27:38.235052

"""
from alembic import op
import sqlalchemy as sa
import logging


# revision identifiers, used by Alembic.
revision = '20241115_wip_migration'
down_revision = '20241029_hf1_import_appid'
branch_labels = None
depends_on = None





def upgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('preference_users', schema=None) as batch_op:
        batch_op.drop_column('application_host')

    # ### end Alembic commands ###


def downgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('preference_users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('application_host', sa.VARCHAR(), server_default=sa.text("''::character varying"), autoincrement=False, nullable=False))

    # ### end Alembic commands ###


# ###############################################################################
# Boilerplate
#
def _call(name):
    if name not in globals():
        logging.warning(f"Pas de fonction: '{name}'. la migration sera ignor√©e")
    else:
        globals()[name]()

def upgrade(engine_name):
    fn_name = f"upgrade_{engine_name}"
    _call(fn_name)

def downgrade(engine_name):
    fn_name = f"downgrade_{engine_name}"
    _call(fn_name)

# ###############################################################################