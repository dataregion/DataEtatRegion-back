"""ajout data source

Revision ID: 20241007_ajout_data_source
Revises: 20241016_v1_prefapphost
Create Date: 2024-10-07 11:18:31.381807

"""

from alembic import op
import sqlalchemy as sa
import logging
from pathlib import Path
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "20241018_ajout_data_source"
down_revision = "20241016_v1_prefapphost"
branch_labels = None
depends_on = None


_data_folder = Path(__file__).resolve().parent / __name__


def upgrade_():
    # ### commands auto generated by Alembic - please adjust! ###

    with op.batch_alter_table("financial_ae", schema=None) as batch_op:
        batch_op.add_column(sa.Column("data_source", sa.String()))

    with op.batch_alter_table("financial_cp", schema=None) as batch_op:
        batch_op.add_column(sa.Column("data_source", sa.String()))

    op.execute("UPDATE financial_ae SET data_source = 'REGION' WHERE data_source IS NULL")
    op.execute("UPDATE financial_cp SET data_source = 'REGION' WHERE data_source IS NULL")

    op.alter_column("financial_ae", "data_source", nullable=False)
    op.alter_column("financial_cp", "data_source", nullable=False)

    with op.batch_alter_table("financial_ae", schema=None) as batch_op:
        batch_op.drop_constraint("unique_ej_poste_ej", type_="unique")
        batch_op.create_unique_constraint("unique_ej_poste_ej_data_source", ["n_ej", "n_poste_ej", "data_source"])

    logging.info("Ajout data_source dans les vues")
    op.execute(_new_filecontent("flatten_ademe.sql"))
    op.execute(_new_filecontent("flatten_ae.sql"))
    op.execute(_new_filecontent("flatten_orphan_cp.sql"))
    op.execute(_new_filecontent("flatten_financial_lines.sql"))

    op.execute("DROP VIEW IF EXISTS public.superset_lignes_financieres")
    op.execute("DROP MATERIALIZED VIEW IF EXISTS flatten_financial_lines")

    op.execute(_new_filecontent("materialized_flatten_financial_lines.sql"))
    op.execute(_new_filecontent("superset_lignes_financieres.sql"))

    logging.info("Refresh de la VM contenant les champs impliqués")
    op.execute("REFRESH MATERIALIZED VIEW public.flatten_financial_lines;")
    op.execute("INSERT INTO public.ref_region (code, label) VALUES ('99', 'Etranger');")
    op.execute("INSERT INTO public.ref_region (code, label) VALUES ('00', 'Administration centrale');")

    with op.batch_alter_table("financial_ae", schema=None) as batch_op:
        batch_op.alter_column("fournisseur_titulaire", existing_type=sa.VARCHAR(), nullable=True)
        batch_op.alter_column("date_modification_ej", existing_type=postgresql.TIMESTAMP(), nullable=True)

    with op.batch_alter_table("financial_cp", schema=None) as batch_op:
        batch_op.alter_column("groupe_marchandise", existing_type=sa.VARCHAR(), nullable=True)

    # ### end Alembic commands ###


def downgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("financial_ae", schema=None) as batch_op:
        batch_op.drop_constraint("unique_ej_poste_ej_data_source", type_="unique")
        batch_op.create_unique_constraint("unique_ej_poste_ej", ["n_ej", "n_poste_ej"])

    op.execute("DROP VIEW IF EXISTS public.superset_lignes_financieres")
    op.execute("DROP MATERIALIZED VIEW IF EXISTS flatten_financial_lines")
    op.execute("DROP VIEW IF EXISTS public._flatten_financial_lines")

    op.execute("DROP VIEW IF EXISTS public.montant_par_niveau_bop_annee_type")
    op.execute("DROP MATERIALIZED VIEW IF EXISTS vt_m_montant_par_niveau_bop_annee_type")
    op.execute("DROP MATERIALIZED VIEW IF EXISTS vt_m_summary_annee_geo_type_bop")
    op.execute("DROP MATERIALIZED VIEW IF EXISTS vt_budget_summary")
    op.execute("DROP MATERIALIZED VIEW IF EXISTS vt_flatten_summarized_ademe")
    op.execute("DROP VIEW IF EXISTS public.flatten_ademe")

    op.execute("DROP VIEW IF EXISTS public.flatten_orphan_cp")

    op.execute("DROP MATERIALIZED VIEW IF EXISTS vt_flatten_summarized_ae")
    op.execute("DROP VIEW IF EXISTS public.flatten_ae")

    with op.batch_alter_table("financial_cp", schema=None) as batch_op:
        batch_op.drop_column("data_source")

    with op.batch_alter_table("financial_ae", schema=None) as batch_op:
        batch_op.drop_column("data_source")

    # ## Interminable.. on désactive
    # op.execute(_old_filecontent("flatten_ae.sql"))
    # op.execute(_old_filecontent("vt_flatten_summarized_ae.sql"))
    # op.execute(_old_filecontent("flatten_ademe.sql"))
    # op.execute(_old_filecontent("flatten_orphan_cp.sql"))
    # op.execute(_old_filecontent("flatten_financial_lines.sql"))

    # op.execute(_old_filecontent("materialized_flatten_financial_lines.sql"))
    # op.execute(_old_filecontent("superset_lignes_financieres.sql"))

    # op.execute(_old_filecontent("vt_flatten_summarized_ademe.sql"))
    # op.execute(_old_filecontent("vt_budget_summary.sql"))
    # op.execute(_old_filecontent("vt_m_summary_annee_geo_type_bop.sql"))
    # op.execute(_old_filecontent("vt_m_montant_par_niveau_bop_annee_type.sql"))
    # op.execute(_old_filecontent("montant_par_niveau_bop_annee_type.sql"))

    # logging.info("Refresh de la VM contenant les champs impliqués")
    # op.execute("REFRESH MATERIALIZED VIEW public.flatten_financial_lines;")
    op.execute("DELETE FROM public.ref_region WHERE code = '99';")
    op.execute("DELETE FROM public.ref_region WHERE code = '00';")

    with op.batch_alter_table("financial_cp", schema=None) as batch_op:
        batch_op.alter_column("groupe_marchandise", existing_type=sa.VARCHAR(), nullable=False)

    with op.batch_alter_table("financial_ae", schema=None) as batch_op:
        batch_op.alter_column("date_modification_ej", existing_type=postgresql.TIMESTAMP(), nullable=False)
        batch_op.alter_column("fournisseur_titulaire", existing_type=sa.VARCHAR(), nullable=False)

    # ### end Alembic commands ###


def upgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


# ###############################################################################
# Boilerplate
#
def _call(name):
    if name not in globals():
        logging.warning(f"Pas de fonction: '{name}'. la migration sera ignorée")
    else:
        globals()[name]()


def upgrade(engine_name):
    fn_name = f"upgrade_{engine_name}"
    _call(fn_name)


def downgrade(engine_name):
    fn_name = f"downgrade_{engine_name}"
    _call(fn_name)


# ###############################################################################
def _old_filecontent(name: str):
    """Get file content from ./`modulename`/old/name"""
    p = _data_folder / "old" / name
    with p.open("r") as f:
        view_str = f.read()
    return view_str


def _new_filecontent(name: str):
    """Get file content from ./`modulename`/new/name"""
    p = _data_folder / "new" / name
    with p.open("r") as f:
        view_str = f.read()
    return view_str


def _drop_new_views():
    #
    # Drop de toutes les vues
    #
    print("Drop de toutes les vues")
    op.execute("DROP VIEW IF EXISTS public.montant_par_niveau_bop_annee_type")
    op.execute("DROP VIEW IF EXISTS public.superset_lignes_financieres")

    op.execute("DROP MATERIALIZED VIEW IF EXISTS public.vt_m_montant_par_niveau_bop_annee_type")
    op.execute("DROP MATERIALIZED VIEW IF EXISTS public.vt_m_summary_annee_geo_type_bop")
    op.execute("DROP MATERIALIZED VIEW IF EXISTS public.vt_budget_summary")
    op.execute("DROP MATERIALIZED VIEW IF EXISTS public.vt_flatten_summarized_ademe")
    op.execute("DROP MATERIALIZED VIEW IF EXISTS public.vt_flatten_summarized_ae")

    #
    op.execute("DROP MATERIALIZED VIEW IF EXISTS public.flatten_financial_lines")
    op.execute("DROP VIEW IF EXISTS public._flatten_financial_lines")
    op.execute("DROP VIEW IF EXISTS public.flatten_ademe")
    op.execute("DROP VIEW IF EXISTS public.flatten_ae")
