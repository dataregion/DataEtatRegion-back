"""20241007_qpv_with_geom

Revision ID: 20241007_qpv_with_geom
Revises: 20241007_qpv_code_15_24
Create Date: 2024-10-09 10:05:45.171285

"""
import os
import shutil

import geoalchemy2
import wget
from alembic import op
import sqlalchemy as sa
import logging
from pathlib import Path
from pyunpack import Archive
import geopandas
from sqlalchemy import text


# revision identifiers, used by Alembic.
revision = '20241115_b_qpv_with_geom'
down_revision = '20241115_a_qpv_code_15_24'
branch_labels = None
depends_on = None


def _update_geometries(geo_df, table_name):
    conn = op.get_bind()
    update_query = text(f"""
        UPDATE {table_name}
        SET 
            geom = ST_SetSRID(ST_GeomFromText(:wkt), 4326),
            centroid = ST_Centroid(ST_SetSRID(ST_GeomFromText(:wkt), 4326))
        WHERE code = :code;
        """)

    for idx, row in geo_df.iterrows():
        logging.warning(row['code'])
        conn.execute(update_query, {'wkt': row['geom'].wkt, 'code': row['code']})


def _import_db(work_path, file_name):
    geodata = geopandas.read_file(work_path / file_name)
    if geodata.crs is None or geodata.crs.to_string() != 'EPSG:2154':
        geodata.set_crs(epsg=2154, inplace=True)
    geodata = geodata.to_crs(epsg=4326)

    geodata = geodata.drop(columns=['nm_qrtr'])
    geodata = geodata.rename(columns={
        'cd_qrtr': 'code',
        'geometry': 'geom'
    })
    _update_geometries(geodata, 'ref_qpv')
    logging.warning(geodata.columns)


def _download_source(work_path, tmp_work_path, tmp_archive_name):

    url = "https://www.data.gouv.fr/fr/datasets/r/08f80659-becb-4e7e-bdbd-b0d383ff401b"

    tmp_work_path.mkdir(exist_ok=True)

    tmp_file_path = tmp_work_path / tmp_archive_name

    logging.warning("Download shapefile Zip %s to %s", url, tmp_file_path)
    wget.download(url, out=str(tmp_file_path))

    Archive(tmp_file_path).extractall(work_path, auto_create_dir=True)
    # remove zip in tmp
    os.remove(tmp_file_path)


def _import_geo_data():
    logging.warning('*** [START] FETCH QPV GEO info ***')

    current_base_path = Path.cwd()
    workdir_path = current_base_path / 'workdir'
    tmp_workdir_path = current_base_path / 'tmp_workdir'

    tmp_archive_name = 'shp.zip'
    file_name = 'qp_2024_epsg2154_20240820.shp'

    _download_source(workdir_path, tmp_workdir_path, tmp_archive_name)

    _import_db(workdir_path, file_name)

    shutil.rmtree(workdir_path)
    shutil.rmtree(tmp_workdir_path)
    logging.warning('*** [END] FETCH QPV GEO info ***')



def upgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('ref_qpv', schema=None) as batch_op:
        batch_op.add_column(sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='GEOMETRY', from_text='ST_GeomFromEWKT', name='geometry'), nullable=True))
        batch_op.add_column(sa.Column('centroid', geoalchemy2.types.Geometry(geometry_type='POINT', from_text='ST_GeomFromEWKT', name='geometry'), nullable=True))
        batch_op.drop_index('idx_ref_qpv_geom', postgresql_using='gist')
        batch_op.drop_index('idx_ref_qpv_centroid', postgresql_using='gist')
        batch_op.create_index('idx_ref_qpv_centroid', ['centroid'], unique=False, postgresql_using='gist')
        batch_op.create_index('idx_ref_qpv_geom', ['geom'], unique=False, postgresql_using='gist')

    _import_geo_data()
    # ### end Alembic commands ###


def downgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('ref_qpv', schema=None) as batch_op:
        batch_op.drop_index('idx_ref_qpv_geom', postgresql_using='gist')
        batch_op.drop_index('idx_ref_qpv_centroid', postgresql_using='gist')
        batch_op.drop_column('centroid')
        batch_op.drop_column('geom')
    # ### end Alembic commands ###


def upgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_demarches_simplifiees():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_demarches_simplifiees():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


# ###############################################################################
# Boilerplate
#
def _call(name):
    if name not in globals():
        logging.warning(f"Pas de fonction: '{name}'. la migration sera ignor√©e")
    else:
        globals()[name]()

def upgrade(engine_name):
    fn_name = f"upgrade_{engine_name}"
    _call(fn_name)

def downgrade(engine_name):
    fn_name = f"downgrade_{engine_name}"
    _call(fn_name)

# ###############################################################################