"""empty message

Revision ID: a33c952242f4
Revises: 20240529_improve_ademe
Create Date: 2024-05-31 12:41:27.006803

"""
from alembic import op
import sqlalchemy as sa
import logging

# revision identifiers, used by Alembic.
revision = '20240531_improve_ds_models'
down_revision = '20240529_improve_ademe'
branch_labels = None
depends_on = None





def upgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_demarches_simplifiees():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('demarches', schema=None) as batch_op:
        batch_op.add_column(sa.Column('state', sa.String(), nullable=False))
        batch_op.add_column(sa.Column('date_creation', sa.DateTime(), nullable=False))
        batch_op.add_column(sa.Column('date_fermeture', sa.DateTime(), nullable=True))

    with op.batch_alter_table('dossiers', schema=None) as batch_op:
        batch_op.add_column(sa.Column('revision_id', sa.String(), nullable=False))
        batch_op.add_column(sa.Column('date_depot', sa.DateTime(), nullable=False))

    with op.batch_alter_table('valeurs_donnees', schema=None) as batch_op:
        batch_op.add_column(sa.Column('additional_data', sa.JSON(), nullable=True))
        batch_op.alter_column('valeur',
               existing_type=sa.VARCHAR(),
               nullable=True)
    # ### end Alembic commands ###


def downgrade_demarches_simplifiees():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('dossiers', schema=None) as batch_op:
        batch_op.drop_column('date_depot')
        batch_op.drop_column('revision_id')

    with op.batch_alter_table('demarches', schema=None) as batch_op:
        batch_op.drop_column('date_fermeture')
        batch_op.drop_column('date_creation')
        batch_op.drop_column('state')

    with op.batch_alter_table('valeurs_donnees', schema=None) as batch_op:
        batch_op.alter_column('valeur',
               existing_type=sa.VARCHAR(),
               nullable=False)
        batch_op.drop_column('additional_data')
    # ### end Alembic commands ###


# ###############################################################################
# Boilerplate
#
def _call(name):
    if name not in globals():
        logging.warning(f"Pas de fonction: '{name}'. la migration sera ignor√©e")
    else:
        globals()[name]()

def upgrade(engine_name):
    fn_name = f"upgrade_{engine_name}"
    _call(fn_name)

def downgrade(engine_name):
    fn_name = f"downgrade_{engine_name}"
    _call(fn_name)

# ###############################################################################