"""20241016_v1_prefapphost

Revision ID: 20241016_v1_prefapphost
Revises: 20240926_vue_france_2030
Create Date: 2024-10-02 11:56:08.421685

"""

from alembic import op
import sqlalchemy as sa
import logging


# revision identifiers, used by Alembic.
revision = "20241016_v1_prefapphost"
down_revision = "20240926_vue_france_2030"
branch_labels = None
depends_on = None


def upgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_audit():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("preference_users", schema=None) as batch_op:
        batch_op.add_column(sa.Column("application_clientid", sa.String(), nullable=True))

    upgrade_pref_sql_bretagne = """
    UPDATE preference_users
    SET application_clientid = 'bretagne.budget'
    WHERE application_host like '%budget%databretagne%'
    OR application_host like '%localhost%';
"""
    op.execute(upgrade_pref_sql_bretagne)

    upgrade_pref_sql_hdf = """
    UPDATE preference_users
    SET application_clientid = 'hdf.budget'
    WHERE application_host like '%budget%hautsdefrance%';
"""
    op.execute(upgrade_pref_sql_hdf)

    upgrade_pref_sql_relance = """
    UPDATE preference_users
    SET application_clientid = 'francerelance'
    WHERE application_host like '%relance%databretagne%';
"""
    op.execute(upgrade_pref_sql_relance)

    with op.batch_alter_table("preference_users", schema=None) as batch_op:
        batch_op.alter_column("application_clientid", nullable=False)
    # ### end Alembic commands ###


def downgrade_settings():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("preference_users", schema=None) as batch_op:
        batch_op.drop_column("application_clientid")

    # ### end Alembic commands ###


def upgrade_demarches_simplifiees():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_demarches_simplifiees():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


# ###############################################################################
# Boilerplate
#
def _call(name):
    if name not in globals():
        logging.warning(f"Pas de fonction: '{name}'. la migration sera ignor√©e")
    else:
        globals()[name]()


def upgrade(engine_name):
    fn_name = f"upgrade_{engine_name}"
    _call(fn_name)


def downgrade(engine_name):
    fn_name = f"downgrade_{engine_name}"
    _call(fn_name)


# ###############################################################################
